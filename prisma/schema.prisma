generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String?
  email             String?             @unique
  password          String?
  password_text     String?
  created_at        DateTime            @default(now()) @map(name: "created_at")
  updated_at        DateTime            @updatedAt @map(name: "updated_at")
  pracels           Parcel[]
  Wallet            Wallet?
  WithdrawalRequest WithdrawalRequest[]
  PaymentHistory    PaymentHistory[]

  @@map(name: "users")
}

model Parcel {
  id               Int     @id @default(autoincrement())
  user_id          Int?     // Foreign key to the User model
  order_id         String? @unique
  from_wilaya_id   Int?
  from_wilaya_name String
  firstname        String
  familyname       String
  contact_phone    String

  // location
  address         String?
  to_commune_id   Int?
  to_commune_name String
  to_wilaya_id    Int?
  to_wilaya_name  String
  to_center_id    Int?
  to_center_name  String?
  stopdesk_name   String?
  is_stopdesk        Boolean

  product_list       String
  price              Int
  do_insurance       Boolean
  declared_value     Int? // Made nullable
  height             Int? // Made nullable
  width              Int? // Made nullable
  length             Int? // Made nullable
  weight             Float? // Made nullable, using Float for decimal support
  freeshipping       Boolean
  stopdesk_id        Int? // Made nullable
  has_exchange       Boolean
  product_to_collect String? // Made nullable

  tracking  String? // Add this line
  import_id Int? // Add this line
  label     String? // Add this line
  labels    String? // Add this line
  message   String? // Add this line
  success   Boolean? // Add this line

  grouped_tracking String? // Add this line

  taxe_percentage  Decimal? // Add this line
  taxe_from        Int? // Add this line
  taxe_retour      Int? // Add this line
  delivery_fee     Int? // Add this line
  date_creation    DateTime? // Add this line
  date_expedition  DateTime? // Add this line
  date_last_status DateTime? // Add this line
  last_status      String? // Add this line
  parcel_type      String? // Add this line
  parcel_sub_type  String? // Add this line

  qr_text String? // Add this line
  pin     String? // Add this line

  status         String? // Add this line
  payment_id     String? // Add this line
  payment_status String? // Add this line
  event_id       String? // Add this line
  occurred_at    DateTime? // Add this line

  is_printed Boolean @default(false)

  user User? @relation(fields: [user_id], references: [id]) // Relation to User model

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("parcels") // Optional:  Map the model to a specific table name
}

/**
 * |--------------------------------------------------------------------------
 * | Wallet
 * |--------------------------------------------------------------------------
 */
model Wallet {
  id             Int      @id @default(autoincrement())
  user_id        Int?     @unique
  crypto_type    String
  wallet_address String
  balance        Decimal  @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id])

  @@map("wallets")
}

model WithdrawalRequest {
  id             Int              @id @default(autoincrement())
  user_id        Int?
  amount         Decimal
  crypto_type    String
  wallet_address String
  status         WithdrawalStatus @default(PENDING)
  requested_at   DateTime         @default(now())
  processed_at   DateTime?
  transaction_id String?
  notes          String?

  user User? @relation(fields: [user_id], references: [id])

  @@map("withdrawal_requests")
}

model PaymentHistory {
  id             Int      @id @default(autoincrement())
  user_id        Int?
  amount         Decimal
  payment_date   DateTime @default(now())
  description    String?
  transaction_id String?

  user User? @relation(fields: [user_id], references: [id])

  @@map("payment_history")
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
